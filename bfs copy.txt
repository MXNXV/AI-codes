from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    
    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v , end = " ")

        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFSUtil(neighbour, visited)

    def DFS(self, v):
        visited = set()
        self.DFSUtil(v, visited)

g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)

g.DFS(2)

--------------------------------------------------------------------------------------------------------------------

from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    
    def addEdge(self, u, v):
        self.graph[u].append(v)
    
    def BFS(self, s):
        visited = [False]* (max(self.graph)+1)
        queue = []
        queue.append(s)
        visited[s] = True
        while queue:
            s = queue.pop(0)
            print(s, end = "")
            
            for i in self.graph[s]:
                if visited[i] == False:
                    queue.append(i)
                    visited[i] = True
        

g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)

g.BFS(2)

-------------------------------------------------------------------------------------------------------------------

def printJS(arr, t):
    n = len(arr)
    # Sorting in descending order of profit
    for i in range(n):
        for j in range(n-1-i):
            if arr[j][2]<arr[j+1][2]:
                arr[j],arr[j+1] = arr[j+1],arr[j]
    
    result = [False]*t
    job = ['-1']*t

    for i in range(len(arr)):
        for j in range(min(t-1, arr[i][1]-1), -1, -1):
            if result[j] is False:
                result[j] = True
                job[j] = arr[i][0]
                break
    print(job)

arr = [['a', 2, 100],
       ['b', 1, 19],
       ['c', 2, 27],
       ['d', 1, 25],
       ['e', 3, 15]]
print("The maximum profit is as follows: ")

printJS(arr, 3)

-------------------------------------------------------------------------------------------------------------------
global N
N = 4
def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j] ,end = " ")
        print()

def isSafe(board, row, col):
    #  check left values
    for i in range(col):
        if board[row][i] == 1:
            return False
    # Check upper left diagonal
    for i,j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    # Check lower left diagonal
    for i,j in zip(range(row, N, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True


def solveNQUtil(board, col):
    if col>=N:
        return True
    
    for i in range(N):
        if isSafe(board, i, col):
            board[i][col] =1
            
            if solveNQUtil(board, col+1) == True:
                return True

            board[i][col] = 0
    return False

def solveNQ():
    board = [[0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0]]
    print("The blank board is: ")
    printSolution(board)
    if solveNQUtil(board, 0) == False:
        print('No solution Found')
        return False
    print("The solution is: ")
    printSolution(board)

solveNQ()

-------------------------------------------------------------------------------------------------------------------

from chatterbot import ChatBot
from chatterbot import ChatterBotCorpusTrainer
chatbot = ChatBot("Greeting")
trainer = ChatterBotCorpusTrainer(chatbot)
trainer.train('chatterbot.corpus.english.greetings',
'chatterbot.corpus.english.conversations')
response = chatbot.get_response('Wht is your number')
print(response)

______________________________________________

import nltk
from nltk.chat.util import Chat, reflections

pairs=[
    #
    [
        r"my name is (.)",
        ["Hello %1, How are you"]
    ],
    # Or expression
    [
        r"Hi|Hello|Hey there|Hola",
        ["Hello my name is Hiesenberg"]
    ],
    [
        r"what is your name ?",
        ["I am a bot created by Heisenbergwhat. you can call me crazy!",]
    ],
    [
        r"how are you ?",
        ["I'm doing good How about You ?",]
    ],
    [
        r"sorry (.*)",
        ["Its alright","Its OK, never mind",]
    ],
    [
        r"I am fine",
        ["Great to hear that, How can I help you?",]
    ],
    [
        r"I (.*) good",
        ["Nice to hear that","How can I help you?:)",]
    ],
    [
        r"(.*) age?",
        ["I'm a computer program dude Seriously you are asking me this?",]
    ],
    [
        r"what (.*) want ?",
        ["Make me an offer I can't refuse",]
    ],
    [
        r"(.*) created ?",
        ["Raghav created me using Python's NLTK library ","top secret ;)",]
    ],
    [
        r"(.*) (location|city) ?",
        ['Indore, Madhya Pradesh',]
    ],
    [
        r"how is weather in (.*)?",
        ["Weather in %1 is awesome like always","Too hot man here in %1","Too cold man here in %1","Never even heard about %1"]
    ],
    [
        r"i work in (.*)?",
        ["%1 is an Amazing company, I have heard about it. But they are in huge loss these days.",]
    ],
    [
        r"(.*)raining in (.*)",
        ["No rain since last week here in %2","Damn its raining too much here in %2"]
    ],
    [
        r"how (.*) health(.*)",
        ["I'm a computer program, so I'm always healthy ",]
    ],
    [
        r"(.*) (sports|game) ?",
        ["I'm a very big fan of Football",]
    ],
    [
        r"who (.*) sportsperson ?",
        ["Messy","Ronaldo","Roony"]
    ],
    [
        r"who (.*) (moviestar|actor)?",
        ["Brad Pitt"]
    ],
    [
        r"i am looking for online guides and courses to learn data science, can you suggest?",
        ["Crazy_Tech has many great articles with each step explanation along with code, you can explore"]
    ],
    [
        r"quit",
        ["Thank you for using our intelligence services"]
    ],
    

]

def chat():
    print("Hey there! I am Heisenberg at your service")
    chat = Chat(pairs)
    chat.converse()

if __name__== "__main__":
    chat()
